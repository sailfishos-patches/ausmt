#!/bin/sh

# 
# Some constants
# 

# Root
AUSMT_VAR_DIR=/var/lib/patchmanager/ausmt
PATCH_ROOT_DIR=/usr/share/patchmanager/patches

# Paths / Files
AUSMT_CONTROL_DIR=${AUSMT_VAR_DIR}/control
PATCH_DIR=${PATCH_ROOT_DIR}/${1}

AUSMT_LOG_FILE=${AUSMT_VAR_DIR}/ausmt.log
AUSMT_PACKAGES_LIST_FILE=${AUSMT_VAR_DIR}/packages
AUSMT_CACHE_FILE=${AUSMT_VAR_DIR}/packages.cache
AUSMT_PATCH_BACKUP_ROOT_DIR=${AUSMT_VAR_DIR}/patches
AUSMT_PATCH_BACKUP_DIR=${AUSMT_PATCH_BACKUP_ROOT_DIR}/${1}

LIPSTICK_FILE=/usr/bin/lipstick
PANDORA_MD5SUMS_FILE=/opt/lipstick-pandora/md5sums

# Constants
PATCH_NAME=unified_diff.patch
VERSION=ausmt-sailfishos-1

# Applications
MD5SUM_EXEC=/usr/bin/sha256sum
RPM_EXEC=/bin/rpm
PATCH_EXEC=/usr/bin/patch
LSDIFF_EXEC=/usr/bin/lsdiff 
NOTIFY_WRAPPER_EXEC=/opt/ausmt/ausmt-notify-wrapper

#
# Here starts the part where all the magic happens
#

#
# Helper functions that do all the needed heavy work
#

failure_unpatch() {
  ${PATCH_EXEC} -s -p1 -R -d / --dry-run < ${PATCH_DIR}/${PATCH_NAME} | tee -a $PATCH_LOG 1>&2
}

failure_notify() {
  ${NOTIFY_WRAPPER_EXEC} frm ${PATCH_DIR}
}

success_notify() {
  ${NOTIFY_WRAPPER_EXEC} rm ${PATCH_DIR}
}

failure() {
  failure_unpatch

  echo | tee -a ${AUSMT_LOG_FILE}
  echo "*** FAILED ***" | tee -a ${AUSMT_LOG_FILE}
  echo | tee -a ${AUSMT_LOG_FILE}

  failure_notify

  rm -f $AUSMT_CACHE_FILE >/dev/null 2>&1

#   mount -o ro,remount / | tee -a ${AUSMT_LOG_FILE} 1>&2

  exit 1
}

success() {
  echo | tee -a ${AUSMT_LOG_FILE}
  echo "*** SUCCESS ***" | tee -a ${AUSMT_LOG_FILE}
  echo | tee -a ${AUSMT_LOG_FILE}

  success_notify

  rm -f $AUSMT_CACHE_FILE >/dev/null 2>&1

#   mount -o ro,remount / | tee -a ${AUSMT_LOG_FILE} 1>&2

  exit 0
}

get_bck_file() {
  bck_file=`dirname ${file}`"/."`basename ${file}`".orig"

  if [ ! -f ${bck_file} ]; then
    bck_file="${file}.webosinternals.orig"
  fi
}

get_palm_md5sum() {
  palm_md5sum=""
  pkg_package=""
  pkg_version=""

  appid=`basename ${PATCH_DIR}`

  if [ -f $AUSMT_CACHE_FILE ]; then
    md5sums_line=`grep "^${file} " $AUSMT_CACHE_FILE`

    palm_md5sum=`echo ${md5sums_line} | awk '{print $2}'`
    pkg_package=`echo ${md5sums_line} | awk '{print $3}'`
    pkg_version=`echo ${md5sums_line} | awk '{print $4}'`
  fi
}

find_palm_md5sum() {
  palm_md5sum=""
  pkg_package=""
  pkg_version=""

  echo "Finding md5sum for original file" >> ${AUSMT_LOG_FILE}
  echo "  file: ${file}" >> ${AUSMT_LOG_FILE}

  # We change from Palm, and use rpm to query the MD5 (or SHA256) sum
  # Check if the file is in an RPM
  if [ ! -z "$(${RPM_EXEC} -q --queryformat '[%{FILENAMES}\n]' -f ${file} | grep ^${file})" ]; then
    pkg_package=$(${RPM_EXEC} -q --queryformat '%{NAME}' -f ${file} 2> /dev/null)
    pkg_version=$(${RPM_EXEC} -q --queryformat '%{VERSION}-%{RELEASE}' -f ${file} 2> /dev/null)
    palm_md5sum=$(${RPM_EXEC} -q --queryformat '[%{FILENAMES} %{FILEMD5S}\n]' -f ${file} | grep ${file} | awk '{print $2}' 2> /dev/null)
  fi

  if [ ! -z "${palm_md5sum}" ]; then
    echo "${file} ${palm_md5sum} ${pkg_package} ${pkg_version}" >>$AUSMT_CACHE_FILE
  fi
}

verify_text_patch() {
  if [ -f ${AUSMT_PATCH_BACKUP_DIR}/${PATCH_NAME} ]; then
    patch_file=${AUSMT_PATCH_BACKUP_DIR}/${PATCH_NAME}
  else
    patch_file=${PATCH_DIR}/${PATCH_NAME}
  fi

  if [ -f ${patch_file} ]; then
    echo >> ${AUSMT_LOG_FILE}
    echo "----------------------------------" >> ${AUSMT_LOG_FILE}
    echo "Checking patch files" >> ${AUSMT_LOG_FILE}
    echo "----------------------------------" >> ${AUSMT_LOG_FILE}
    echo >> ${AUSMT_LOG_FILE}
  
    FILE_LIST=" "`${LSDIFF_EXEC} --addprefix=/ --strip=1 ${patch_file}`

    for file in ${FILE_LIST} ; do
      find_palm_md5sum
    done

    echo >> ${AUSMT_LOG_FILE}
    echo "----------------------------------" >> ${AUSMT_LOG_FILE}
    echo "Dry running patch" >> ${AUSMT_LOG_FILE}
    echo "----------------------------------" >> ${AUSMT_LOG_FILE}
    echo >> ${AUSMT_LOG_FILE}

    ${PATCH_EXEC} -f -R -p 1 -d / --dry-run < ${patch_file} 2>&1 >> ${AUSMT_LOG_FILE}

    if [ ${?} -ne 0 ]; then
      echo >> ${AUSMT_LOG_FILE}
      echo "----------------------------------" >> ${AUSMT_LOG_FILE}
      echo "Dry run failed, trying without -R" >> ${AUSMT_LOG_FILE}
      echo "----------------------------------" >> ${AUSMT_LOG_FILE}
      echo >> ${AUSMT_LOG_FILE}

      ${PATCH_EXEC} -f -p 1 -d / --dry-run < ${patch_file} 2>&1 >> ${AUSMT_LOG_FILE}

      if [ ${?} -eq 0 ]; then
        echo | tee -a ${AUSMT_LOG_FILE}
        echo "Interestingly, the patch seems to be already unapplied" | tee -a ${AUSMT_LOG_FILE}
        echo | tee -a ${AUSMT_LOG_FILE}

        patch_already_unapplied="yes"
      else
        for file in ${FILE_LIST} ; do
          FAIL_LIST="${FAIL_LIST} $file"
        done
        patch_already_unapplied="yes"
      fi
    fi
  fi
}

remove_text_patch() {
  if [ -f ${patch_file} ]; then
    if [ "${patch_already_unapplied}" != "yes" ]; then
      echo | tee -a ${AUSMT_LOG_FILE}
      echo "----------------------------------" | tee -a ${AUSMT_LOG_FILE}
      echo "Unapplying text patch" | tee -a ${AUSMT_LOG_FILE}
      echo "----------------------------------" | tee -a ${AUSMT_LOG_FILE}
      echo | tee -a ${AUSMT_LOG_FILE}

      ${PATCH_EXEC} -R -p 1 -d / --no-backup-if-mismatch < ${patch_file} 2>&1 >> ${AUSMT_LOG_FILE}
  
      if [ ${?} -ne 0 ]; then
        for file in `${LSDIFF_EXEC} --addprefix=/ --strip=1 ${patch_file}` ; do
          if [ -f ${file}.rej ]; then
            rm -f ${file}.rej
          fi
        done
      fi
    fi
  fi
}

check_ota_update() {
  echo >> ${AUSMT_LOG_FILE}
  echo "----------------------------------" >> ${AUSMT_LOG_FILE}
  echo "Checking md5sums for ota" >> ${AUSMT_LOG_FILE}
  echo "----------------------------------" >> ${AUSMT_LOG_FILE}
  echo >> ${AUSMT_LOG_FILE}

  for file in ${FILE_LIST} ; do
    if [ -f ${file} ]; then
      get_bck_file
      get_palm_md5sum

      file_md5sum=`${MD5SUM_EXEC} ${file} | awk '{print $1}'`
      orig_md5sum=`grep -h "${appid} ${file} " ${AUSMT_CONTROL_DIR}/file_md5sums | awk '{print $3}'`

      if [ -z "${palm_md5sum}" ]; then
        CREATED_LIST="${CREATED_LIST} ${file}"
      elif [ "${palm_md5sum}" = "${file_md5sum}" ] && [ ! -z "${file_md5sum}" ]; then
        echo "File matches current md5sum, assuming OTA" >> ${AUSMT_LOG_FILE}
        echo "  file: ${file}" >> ${AUSMT_LOG_FILE}

        if [ -f ${bck_file} ]; then
          cp -f ${file} ${bck_file}
        fi

        FAIL_LIST="${FAIL_LIST# ${file}}"
        RESTORE_LIST="${RESTORE_LIST} ${file}"
      elif [ "${palm_md5sum}" != "${orig_md5sum}" ] && [ ! -z "${orig_md5sum}" ]; then
        echo "The md5sum of file has changed, assuming OTA" >> ${AUSMT_LOG_FILE}
        echo "  file: ${file}" >> ${AUSMT_LOG_FILE}

        if [ -f ${bck_file} ]; then
          cp -f ${file} ${bck_file}
        fi

        FAIL_LIST="${FAIL_LIST# ${file}}"
        RESTORE_LIST="${RESTORE_LIST} ${file}"
      fi
    else
      echo "File has been completely removed, assuming OTA" >> ${AUSMT_LOG_FILE}
      echo "  file: ${file}" >> ${AUSMT_LOG_FILE}

      FAIL_LIST="${FAIL_LIST# ${file}}"
    fi
  done

  if [ ! -z "${FAIL_LIST}" ]; then
    failure
  fi
}

clean_backup_files() {
  echo >> ${AUSMT_LOG_FILE}
  echo "----------------------------------" >> ${AUSMT_LOG_FILE}
  echo "Cleaning up backup files" >> ${AUSMT_LOG_FILE}
  echo "----------------------------------" >> ${AUSMT_LOG_FILE}
  echo >> ${AUSMT_LOG_FILE}

  for file in ${CREATED_LIST} ; do
    get_bck_file

    if [ -f ${file} ]; then
      echo "Removing created file or old system file" >> ${AUSMT_LOG_FILE}
      echo "  file: ${file}" >>${AUSMT_LOG_FILE}

      rm -f ${file}
    fi
  done

  for file in ${RESTORE_LIST} ; do
    get_bck_file

    if [ -f ${bck_file} ]; then
      echo "Restoring unmodified or updated system file" >> ${AUSMT_LOG_FILE}
      echo "  file: ${file}" >>${AUSMT_LOG_FILE}

      mv -f ${bck_file} ${file}
    fi
  done

  for file in ${FILE_LIST} ; do
    get_bck_file

    get_palm_md5sum

    if [ ! -f ${file} ]; then
      file_md5sum=""
    else
      file_md5sum=`${MD5SUM_EXEC} $file | awk '{print $1}'`
    fi

    if [ ! -f ${bck_file} ]; then
      orig_md5sum=""
    else
      orig_md5sum=`${MD5SUM_EXEC} ${bck_file} | awk '{print $1}'`
    fi

    tmpvar=`echo "${appid} ${file}" | tr '/' '.'`
    sed -i -e /"^${tmpvar} "/d ${AUSMT_CONTROL_DIR}/file_md5sums
        
    if [ ! -f ${file} ] && [ ! -s ${bck_file} ] || \
       [ "${file_md5sum}" = "${orig_md5sum}" ] || [ "${file_md5sum}" = "${palm_md5sum}" ]
    then
      if [ -f ${bck_file} ]; then
        if [ ! -s ${bck_file} ]; then
          echo "Removing unneeded generated backup file" >>${AUSMT_LOG_FILE}
          echo "  file: ${bck_file}" >>${AUSMT_LOG_FILE}
        else
          echo "Removing unneeded backup of system file" >>${AUSMT_LOG_FILE}
          echo "  file: ${bck_file}" >>${AUSMT_LOG_FILE}
        fi

        rm -f ${bck_file}
      fi

      tmpvar=`echo "${file}" | tr '/' '.'`
      sed -i -e /"^${tmpvar} "/d ${AUSMT_CONTROL_DIR}/file_list
      sed -i -e /" ${tmpvar} "/d ${AUSMT_CONTROL_DIR}/file_control
    fi
  done

  sed -i -e /"^`basename ${PATCH_DIR}` "/d ${AUSMT_PACKAGES_LIST_FILE}
}

clean_backup_patch() {
  echo >> ${AUSMT_LOG_FILE}
  echo "----------------------------------" >> ${AUSMT_LOG_FILE}
  echo "Cleaning backup patch" >> ${AUSMT_LOG_FILE}
  echo "----------------------------------" >> ${AUSMT_LOG_FILE}
  echo >> ${AUSMT_LOG_FILE}

  rm -fr ${AUSMT_PATCH_BACKUP_DIR} > /dev/null 2>&1
  echo "Removed backup" >>${AUSMT_LOG_FILE}
  echo "  backup: ${AUSMT_PATCH_BACKUP_DIR}" >>${AUSMT_LOG_FILE}
}

#
# Bunch of safety checks and required initializations
#

if [ ! -f ${AUSMT_LOG_FILE} ]; then
  echo "*** Patch Log Created by Remove $(date) ***" > ${AUSMT_LOG_FILE}
fi

# mount -o rw,remount / | tee -a ${AUSMT_LOG_FILE} 1>&2

echo >> ${AUSMT_LOG_FILE}
echo "------------------------------------------------------" >> ${AUSMT_LOG_FILE}
echo "AUSMT REMOVE $(date)" >> ${AUSMT_LOG_FILE}
echo "------------------------------------------------------" >> ${AUSMT_LOG_FILE}
echo >> ${AUSMT_LOG_FILE}

echo `basename ${PATCH_DIR}` >> ${AUSMT_LOG_FILE}

if [ -f ${patch_file} ]; then
  echo "  contains text patch" >> ${AUSMT_LOG_FILE}
fi

echo >> ${AUSMT_LOG_FILE}

if [ ! -x ${PATCH_EXEC} ]; then
  echo "ERROR: Cannot find ${PATCH_EXEC}" | tee -a ${AUSMT_LOG_FILE} 1>&2
  failure
fi

if [ ! -x ${LSDIFF_EXEC} ]; then
  echo "ERROR: Cannot find ${LSDIFF_EXEC}" | tee -a ${AUSMT_LOG_FILE} 1>&2
  failure
fi

if [ -z ${PATCH_DIR} ]; then
  echo "ERROR: PATCH_DIR must be given for removing" | tee -a ${AUSMT_LOG_FILE} 1>&2
  failure
fi

if [ ! -d ${PATCH_DIR} ]; then
  echo "ERROR: ${PATCH_DIR} is not a directory or does not exist!" | tee -a ${AUSMT_LOG_FILE} 1>&2
  failure
fi

if [ ! -f ${patch_file} ]; then
  echo "ERROR: Cannot find patch file !" | tee -a ${AUSMT_LOG_FILE} 1>&2
  failure
fi

rm -f $AUSMT_CACHE_FILE >/dev/null 2>&1

#
# The main function that controls all the magic stuff
#

verify_text_patch

check_ota_update

remove_text_patch

clean_backup_files

clean_backup_patch

success

exit 0
